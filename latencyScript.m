

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%load data generated by the Oostenveld script
dataprefix = '../../data/'; %folder where the preprocessed data is stored
load(fullfile(dataprefix,'timelock_unfamiliar_cmb'));
load(fullfile(dataprefix,'timelock_famous_cmb'));
load(fullfile(dataprefix,'timelock_scrambled_cmb'));
load(fullfile(dataprefix,'timelock_faces_cmb'));

%extract information on time and channels
time      = timelock_famous_cmb{1}.time;
chanName  = timelock_famous_cmb{1}.label;

%baseline correction
%the baseline currently is at 0.5 x 10e-12, because of the combination of
%two gradiometers by root-mean-square; this is removed, because it would
%confound various latency measures and makes interpretation of some 
%paramters more cumbersome

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a little bit of pre-processing to bring it into format more convenient for me
nSubs  = length(timelock_faces_cmb);
nElecs = size(timelock_faces_cmb{1}.avg,1);
nTime  = size(timelock_faces_cmb{1}.avg,2);
famous     = nan(nSubs,nElecs,nTime);
unfamiliar = nan(nSubs,nElecs,nTime);
scrambled  = nan(nSubs,nElecs,nTime);
faces      = nan(nSubs,nElecs,nTime);
xlimits    = [-0.2 1.0];
%extract information on time and channels
time      = timelock_famous_cmb{1}.time;
sfreq     = 1/(timelock_famous_cmb{1}.time(2)-timelock_famous_cmb{1}.time(1));
time_in_seconds = true;
% time_in_seconds = false;

%baseline correction
%the baseline currently is at 0.5 x 10e-12, because of the combination of
%two gradiometers by root-mean-square; this is removed, because it would
%confound various latency measures and makes interpretation of some 
%parameters more cumbersome

baseline   = [-0.2 0.0];
for subi=1:nSubs
    figure(10+subi);
    famous(subi,:,:) = baseline_correction(timelock_famous_cmb{subi}.avg,round((baseline-time(1))*sfreq));
    subplot(4,1,1)
    plot(time,squeeze(famous(subi,:,:)),'g');
    xlim(xlimits);
    legend('famous');
    title(sprintf('Subject: %02d',subi));

    unfamiliar(subi,:,:) = baseline_correction(timelock_unfamiliar_cmb{subi}.avg,round((baseline-time(1))*sfreq));
    subplot(4,1,2)
    plot(time,squeeze(unfamiliar(subi,:,:)),'b');
    xlim(xlimits);
    legend('unfamiliar');
    
    scrambled(subi,:,:) = baseline_correction(timelock_scrambled_cmb{subi}.avg,round((baseline-time(1))*sfreq));
    subplot(4,1,3)
    plot(time,squeeze(scrambled(subi,:,:)),'k');
    xlim(xlimits);
    legend('scrambled');
    
    faces(subi,:,:) = baseline_correction(timelock_faces_cmb{subi}.avg,round((baseline-time(1))*sfreq));
    subplot(4,1,4)
    plot(time,squeeze(faces(subi,:,:)),'r');
    xlim(xlimits);
    legend('faces');
   
end
meanERF=(scrambled + faces) / 2;

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Figures - run all code in given order to reproduce results!
%(figures are created without timing information, so that everything is
%expressed in sampling points with 0 as the start of the baseline) 

%settings applying to all figures
cfg = [];
cfg.sign      = 1;    %search for a positive component
cfg.chans     = find(strcmp(chanName,'MEG0712+0713')); %set channel to analyze
cfg.peakWidth = 5;    %set peak width (5 is default anyway)
if time_in_seconds
    cfg.times     = time;
    cfg.sampRate  = sfreq;
    cfg.peakWidth = cfg.peakWidth/sfreq;    %set peak width (5 is default anyway)
end
cfg.fig       = true; %request figures for individual averages


%% Figure 1
cfg.extract   = {'peakLat','onset','offset','areaLat'}; %choose all desired latency measures
cfg.percAmp   = 0.3;        %determines on- and offset
cfg.peakWin   = [600 800];  %search window for early component
if time_in_seconds
    cfg.peakWin   = (cfg.peakWin-1)/sfreq + time(1); %search window for early component
end
[ res, ~] = latency(cfg,famous);        %Figure 1, early component
%% Bar graph with results
results = [res.onset  res.peakLat res.areaLat res.offset ];
if time_in_seconds
    figure(111); modstr = 'seconds';
else
    figure(110); modstr = 'samples';
end
bh=bar(results);
legend({'Onset','PeakLat','AreaLat','Offset'},'Location','northwest');
legend('boxoff');
xticklabels=cell(1,nSubs);
for i=1:nSubs
   xticklabels{i} = sprintf('%d',i); 
end
set(gca,'XTick',1:nSubs,'XTickLabel',xticklabels);

bh(1).FaceColor = 'flat';
bh(1).CData = repmat(bh(1).Parent.ColorOrder(3,:)',1,nSubs)';
bh(2).FaceColor = 'flat';
bh(2).CData = repmat(bh(1).Parent.ColorOrder(1,:)',1,nSubs)';
bh(3).FaceColor = 'flat';
bh(3).CData = repmat(bh(1).Parent.ColorOrder(5,:)',1,nSubs)';
bh(4).FaceColor = 'flat';
bh(4).CData = repmat(bh(1).Parent.ColorOrder(4,:)',1,nSubs)';
title(['Early component - famous, time in ' modstr]);
%%
cfg.peakWin   = [900 1870]; %search window for late component
if time_in_seconds
        cfg.peakWin   = (cfg.peakWin-1)/sfreq + time(1); %search window for late component
end
[ res, ~] = latency(cfg,famous);        %Figure 2, late component

%% Bar graph with results
results = [res.onset  res.peakLat res.areaLat res.offset ];
if time_in_seconds
    figure(121); modstr = 'seconds';
else
    figure(120); modstr = 'samples';
end
bh=bar(results);
legend({'Onset','PeakLat','AreaLat','Offset'},'Location','northwest');
legend('boxoff');
xticklabels=cell(1,nSubs);
for i=1:nSubs
   xticklabels{i} = sprintf('%d',i); 
end
set(gca,'XTick',1:nSubs,'XTickLabel',xticklabels);

bh(1).FaceColor = 'flat';
bh(1).CData = repmat(bh(1).Parent.ColorOrder(3,:)',1,nSubs)';
bh(2).FaceColor = 'flat';
bh(2).CData = repmat(bh(1).Parent.ColorOrder(1,:)',1,nSubs)';
bh(3).FaceColor = 'flat';
bh(3).CData = repmat(bh(1).Parent.ColorOrder(5,:)',1,nSubs)';
bh(4).FaceColor = 'flat';
bh(4).CData = repmat(bh(1).Parent.ColorOrder(4,:)',1,nSubs)';
title(['Late component - famous, time in ' modstr]);


